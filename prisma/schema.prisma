// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(STUDENT)
  facultyId String
  faculty   Faculty  @relation(fields: [facultyId], references: [id])
  advisorId String?
  advisor   User?    @relation("AdvisorStudent", fields: [advisorId], references: [id])
  students  User[]   @relation("AdvisorStudent")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Faculty {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  users     User[]
  departments Department[]
  curricula   Curriculum[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  STUDENT
  ADVISOR
  CHAIRPERSON
}

model Department {
  id          String       @id @default(cuid())
  name        String
  code        String
  facultyId   String
  faculty     Faculty      @relation(fields: [facultyId], references: [id])
  curricula   Curriculum[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([code, facultyId])
}

model Curriculum {
  id           String     @id @default(cuid())
  year         String
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])
  facultyId    String
  faculty      Faculty    @relation(fields: [facultyId], references: [id])
  courses      Course[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([year, departmentId])
}

model Course {
  id            String          @id @default(cuid())
  code          String
  name          String
  credits       Int
  curriculumId  String
  curriculum    Curriculum      @relation(fields: [curriculumId], references: [id])
  prerequisites CourseLink[]    @relation("prerequisite")
  postrequisites CourseLink[]   @relation("postrequisite")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@unique([code, curriculumId])
}

model CourseLink {
  id              String   @id @default(cuid())
  prerequisiteId  String
  postrequisiteId String
  prerequisite    Course   @relation("prerequisite", fields: [prerequisiteId], references: [id])
  postrequisite   Course   @relation("postrequisite", fields: [postrequisiteId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([prerequisiteId, postrequisiteId])
}
